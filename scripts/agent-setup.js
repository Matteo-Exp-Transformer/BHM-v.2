#!/usr/bin/env node

/**
 * 🔧 AGENT SETUP
 * 
 * Setup automatico environment per agenti
 * Gestisce login Supabase, Company ID e configurazione iniziale
 * 
 * Usage:
 *   node scripts/agent-setup.js <agentId>
 */

const fs = require('fs').promises;
const path = require('path');

// Configurazione Supabase
const SUPABASE_URL = 'https://tucqgcfrlzmwyfadiodo.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1Y3FnY2ZybHptd3lmYWRpb2RvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk5NTY0ODksImV4cCI6MjA3NTUzMjQ4OX0.7m3bdxW8QMHO6YNQ4cxoxlzzgzq7DjTzufv89YAcHA4';

// Credenziali test
const TEST_EMAIL = 'matteo.cavallaro.work@gmail.com';
const TEST_PASSWORD = 'cavallaro';

const LOCK_DIR = '.agent-locks';

/**
 * Inizializza directory lock se non esiste
 */
async function initLockDir() {
  try {
    await fs.mkdir(LOCK_DIR, { recursive: true });
  } catch (error) {
    if (error.code !== 'EEXIST') {
      throw error;
    }
  }
}

/**
 * Crea file .env.local con configurazione Supabase
 */
async function createEnvFile() {
  const envContent = `# Auto-generated by agent-setup.js
VITE_SUPABASE_URL=${SUPABASE_URL}
VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
VITE_DEBUG_MODE=true
`;

  try {
    await fs.writeFile('.env.local', envContent);
    console.log('✅ File .env.local creato');
  } catch (error) {
    console.error('❌ Errore creazione .env.local:', error.message);
    throw error;
  }
}

/**
 * Simula login Supabase e recupera Company ID
 * In un ambiente reale, questo farebbe chiamate API reali
 */
async function simulateSupabaseLogin(agentId) {
  console.log(`🔐 Simulazione login Supabase per ${agentId}...`);
  
  // Simula chiamata API login
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Simula risposta con Company ID
  const mockResponse = {
    user: {
      id: 'mock-user-id',
      email: TEST_EMAIL,
      role: 'admin'
    },
    company: {
      id: 'mock-company-id-' + Date.now(),
      name: 'Al Ritrovo SRL',
      email: TEST_EMAIL
    },
    session: {
      access_token: 'mock-access-token',
      refresh_token: 'mock-refresh-token'
    }
  };
  
  console.log('✅ Login simulato completato');
  return mockResponse;
}

/**
 * Salva stato agente in file JSON
 */
async function saveAgentState(agentId, authData) {
  await initLockDir();
  
  const stateFile = path.join(LOCK_DIR, `agent-${agentId}-state.json`);
  
  const agentState = {
    agentId,
    timestamp: Date.now(),
    auth: authData,
    supabase: {
      url: SUPABASE_URL,
      anonKey: SUPABASE_ANON_KEY
    },
    credentials: {
      email: TEST_EMAIL,
      password: TEST_PASSWORD
    },
    status: 'ready'
  };
  
  try {
    await fs.writeFile(stateFile, JSON.stringify(agentState, null, 2));
    console.log(`✅ Stato agente salvato: ${stateFile}`);
  } catch (error) {
    console.error('❌ Errore salvataggio stato:', error.message);
    throw error;
  }
}

/**
 * Crea file auth per Playwright
 */
async function createPlaywrightAuth(agentId, authData) {
  await initLockDir();
  
  const authFile = path.join(LOCK_DIR, `agent-${agentId}-auth.json`);
  
  const playwrightAuth = {
    cookies: [
      {
        name: 'sb-access-token',
        value: authData.session.access_token,
        domain: 'localhost',
        path: '/',
        httpOnly: true,
        secure: false
      }
    ],
    origins: [
      {
        origin: 'http://localhost:3000',
        localStorage: [
          {
            name: 'supabase.auth.token',
            value: JSON.stringify(authData.session)
          },
          {
            name: 'active_company_id',
            value: authData.company.id
          }
        ]
      }
    ]
  };
  
  try {
    await fs.writeFile(authFile, JSON.stringify(playwrightAuth, null, 2));
    console.log(`✅ File auth Playwright creato: ${authFile}`);
  } catch (error) {
    console.error('❌ Errore creazione auth Playwright:', error.message);
    throw error;
  }
}

/**
 * Verifica setup completato
 */
async function verifySetup(agentId) {
  const stateFile = path.join(LOCK_DIR, `agent-${agentId}-state.json`);
  const authFile = path.join(LOCK_DIR, `agent-${agentId}-auth.json`);
  
  try {
    const stateData = await fs.readFile(stateFile, 'utf8');
    const authData = await fs.readFile(authFile, 'utf8');
    
    console.log('✅ Setup verificato:');
    console.log(`  - Stato agente: ${stateFile}`);
    console.log(`  - Auth Playwright: ${authFile}`);
    console.log(`  - File .env.local: ${await fs.access('.env.local').then(() => 'OK').catch(() => 'MISSING')}`);
    
    return true;
  } catch (error) {
    console.error('❌ Setup incompleto:', error.message);
    return false;
  }
}

/**
 * Setup completo per un agente
 */
async function setupAgent(agentId) {
  console.log(`🚀 Setup agente ${agentId}...`);
  
  try {
    // 1. Crea .env.local
    await createEnvFile();
    
    // 2. Simula login Supabase
    const authData = await simulateSupabaseLogin(agentId);
    
    // 3. Salva stato agente
    await saveAgentState(agentId, authData);
    
    // 4. Crea auth Playwright
    await createPlaywrightAuth(agentId, authData);
    
    // 5. Verifica setup
    const success = await verifySetup(agentId);
    
    if (success) {
      console.log(`\n🎉 Setup completato per ${agentId}!`);
      console.log(`📋 Company ID: ${authData.company.id}`);
      console.log(`📧 Email: ${authData.user.email}`);
      console.log(`🏢 Company: ${authData.company.name}`);
    } else {
      throw new Error('Setup verification failed');
    }
    
  } catch (error) {
    console.error(`❌ Setup fallito per ${agentId}:`, error.message);
    throw error;
  }
}

/**
 * Mostra informazioni setup
 */
async function showSetupInfo() {
  console.log(`
🔧 AGENT SETUP - Informazioni

Configurazione Supabase:
  URL: ${SUPABASE_URL}
  Anon Key: ${SUPABASE_ANON_KEY.substring(0, 20)}...

Credenziali Test:
  Email: ${TEST_EMAIL}
  Password: ${TEST_PASSWORD}

File generati:
  - .env.local (configurazione Supabase)
  - .agent-locks/agent-{id}-state.json (stato agente)
  - .agent-locks/agent-{id}-auth.json (auth Playwright)

Usage:
  node scripts/agent-setup.js <agentId>
  
Examples:
  node scripts/agent-setup.js agent-1
  node scripts/agent-setup.js agent-2-ui-base
  `);
}

// CLI Interface
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    await showSetupInfo();
    return;
  }
  
  const agentId = args[0];
  
  if (!agentId) {
    console.error('❌ Agent ID richiesto');
    process.exit(1);
  }
  
  try {
    await setupAgent(agentId);
  } catch (error) {
    console.error('❌ Setup fallito:', error.message);
    process.exit(1);
  }
}

// Esegui se chiamato direttamente
if (require.main === module) {
  main();
}

module.exports = {
  setupAgent,
  createEnvFile,
  simulateSupabaseLogin,
  saveAgentState,
  createPlaywrightAuth,
  verifySetup
};
