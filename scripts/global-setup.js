/**
 * üåç GLOBAL SETUP - Playwright Multi-Agent
 * 
 * Setup globale eseguito prima di tutti i test
 * Gestisce autenticazione Supabase e preparazione ambiente
 */

const fs = require('fs').promises;
const path = require('path');

// Configurazione
const LOCK_DIR = '.agent-locks';
const SUPABASE_URL = 'https://tucqgcfrlzmwyfadiodo.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR1Y3FnY2ZybHptd3lmYWRpb2RvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk5NTY0ODksImV4cCI6MjA3NTUzMjQ4OX0.7m3bdxW8QMHO6YNQ4cxoxlzzgzq7DjTzufv89YAcHA4';

/**
 * Setup globale per tutti i test
 * @param {Object} config - Configurazione Playwright
 */
async function globalSetup(config) {
  console.log('üöÄ Global Setup - Multi-Agent Playwright');
  
  const agentId = process.env.AGENT_ID || 'default';
  const port = process.env.AGENT_PORT || '3000';
  
  console.log(`üìã Agent ID: ${agentId}`);
  console.log(`üåê Port: ${port}`);
  
  try {
    // 1. Inizializza directory lock
    await initLockDir();
    
    // 2. Verifica/Crea file .env.local
    await ensureEnvFile();
    
    // 3. Verifica auth state per agente
    await ensureAuthState(agentId);
    
    // 4. Log setup completato
    await logSetup(agentId, port, 'SUCCESS');
    
    console.log('‚úÖ Global Setup completato');
    
  } catch (error) {
    console.error('‚ùå Global Setup fallito:', error.message);
    await logSetup(agentId, port, `FAILED: ${error.message}`);
    throw error;
  }
}

/**
 * Inizializza directory lock
 */
async function initLockDir() {
  try {
    await fs.mkdir(LOCK_DIR, { recursive: true });
    console.log('‚úÖ Directory lock inizializzata');
  } catch (error) {
    if (error.code !== 'EEXIST') {
      throw error;
    }
  }
}

/**
 * Verifica/Crea file .env.local
 */
async function ensureEnvFile() {
  const envPath = '.env.local';
  
  try {
    await fs.access(envPath);
    console.log('‚úÖ File .env.local esistente');
  } catch (error) {
    // Crea file .env.local
    const envContent = `# Auto-generated by global-setup.js
VITE_SUPABASE_URL=${SUPABASE_URL}
VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
VITE_DEBUG_MODE=true
`;
    
    await fs.writeFile(envPath, envContent);
    console.log('‚úÖ File .env.local creato');
  }
}

/**
 * Verifica auth state per agente
 */
async function ensureAuthState(agentId) {
  const authFile = path.join(LOCK_DIR, `agent-${agentId}-auth.json`);
  
  try {
    await fs.access(authFile);
    console.log(`‚úÖ Auth state esistente per ${agentId}`);
  } catch (error) {
    // Crea auth state base
    const authState = {
      cookies: [],
      origins: [
        {
          origin: `http://localhost:${process.env.AGENT_PORT || '3000'}`,
          localStorage: [
            {
              name: 'supabase.auth.token',
              value: JSON.stringify({
                access_token: 'mock-token',
                refresh_token: 'mock-refresh',
                expires_at: Date.now() + 3600000,
              }),
            },
          ],
        },
      ],
    };
    
    await fs.writeFile(authFile, JSON.stringify(authState, null, 2));
    console.log(`‚úÖ Auth state creato per ${agentId}`);
  }
}

/**
 * Log setup operazione
 */
async function logSetup(agentId, port, result) {
  const logFile = path.join(LOCK_DIR, 'setup-history.log');
  const timestamp = new Date().toISOString();
  const logEntry = `${timestamp} | GLOBAL_SETUP | ${agentId} | ${port} | ${result}\n`;
  
  try {
    await fs.appendFile(logFile, logEntry);
  } catch (error) {
    console.error('Errore scrittura setup log:', error.message);
  }
}

module.exports = globalSetup;
